@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject IDialogService DialogService

<FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
    <FluentMessageBar MessageIntent="MessageIntent.Info">
        Set the operating hours for each day of the week. Toggle the switch to mark days when the venue is closed.
    </FluentMessageBar>

    <FluentCard>
        @if (isLoading)
        {
            <div class="loading-container">
                <FluentProgressRing />
                <p>Loading...</p>
            </div>
        }
        else
        {
            <EditForm Model="schedules" OnValidSubmit="HandleValidSubmit">
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                    @foreach (var daySchedule in schedules)
                    {
                        <FluentCard>
                            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center">
                                <span style="font-weight: 500; min-width: 100px;">@daySchedule.DayOfWeek.ToString()</span>

                                <FluentSwitch Label="Closed" @bind-Value="daySchedule.IsClosed" />

                                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="16">
                                    <FluentTimePicker Label="Open" @bind-Value="daySchedule.TimeOfOpenDisplay" Disabled="daySchedule.IsClosed" />
                                    <FluentTimePicker Label="Close" @bind-Value="daySchedule.TimeOfCloseDisplay" Disabled="daySchedule.IsClosed" />
                                </FluentStack>
                            </FluentStack>
                        </FluentCard>
                    }

                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End" HorizontalGap="8">
                        <FluentButton Appearance="Appearance.Neutral" OnClick="@OnCancel">Cancel</FluentButton>
                        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Loading="@isSaving">Save Hours</FluentButton>
                    </FluentStack>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <FluentMessageBar MessageIntent="MessageIntent.Error" Title="Error">@errorMessage</FluentMessageBar>
                    }
                </FluentStack>
            </EditForm>
        }
    </FluentCard>
</FluentStack>

@code {
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public BusinessHoursDialogParameters Parameters { get; set; } = new();

    private List<ScheduleDisplayModel> schedules = new();
    private bool isLoading;
    private bool isSaving;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        isLoading = true;
        schedules.Clear();

        // Create a schedule for each day of the week
        foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
        {
            var existingSchedule = Parameters.BusinessHours?.FirstOrDefault(h => h.DayOfWeek == day);

            var model = new ScheduleDisplayModel
                {
                    Id = existingSchedule?.Id ?? 0,
                    DayOfWeek = day,
                    TimeOfOpen = existingSchedule?.TimeOfOpen ?? new NodaTime.LocalTime(9, 0),
                    TimeOfClose = existingSchedule?.TimeOfClose ?? new NodaTime.LocalTime(17, 0),
                    IsClosed = existingSchedule?.IsClosed ?? (day == DayOfWeek.Sunday),
                };

            // Set DateTime display values for Fluent UI
            model.TimeOfOpenDisplay = DateTimeConverter.ToDateTime(model.TimeOfOpen);
            model.TimeOfCloseDisplay = DateTimeConverter.ToDateTime(model.TimeOfClose);

            schedules.Add(model);
        }

        // Sort by day of week starting with Monday
        schedules = schedules.OrderBy(s => s.DayOfWeek == DayOfWeek.Sunday ? 7 : (int)s.DayOfWeek).ToList();

        isLoading = false;
    }

    private void OnCancel()
    {
        Dialog.Cancel();
    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        errorMessage = null;

        try
        {
            // Convert the display models to API request models
            var apiSchedules = schedules.Select(s => new UpdateOperatingScheduleRequest
                {
                    Id = s.Id,
                    DayOfWeek = s.DayOfWeek,
                    TimeOfOpen = DateTimeConverter.ToLocalTime(s.TimeOfOpenDisplay),
                    TimeOfClose = DateTimeConverter.ToLocalTime(s.TimeOfCloseDisplay),
                    IsClosed = s.IsClosed
                });

            var response = await Http.PutAsJsonAsync($"api/admin/venues/{Parameters.VenueId}/schedules", apiSchedules);

            if (response.IsSuccessStatusCode)
            {
                await Dialog.CloseAsync(DialogResult.Ok(true));
            }
            else
            {
                errorMessage = $"Failed to update business hours: {response.ReasonPhrase}";
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    public class ScheduleDisplayModel
    {
        public long Id { get; set; }
        public DayOfWeek DayOfWeek { get; set; }
        public NodaTime.LocalTime TimeOfOpen { get; set; }
        public NodaTime.LocalTime TimeOfClose { get; set; }
        public bool IsClosed { get; set; }

        // DateTime properties for Fluent UI components
        public DateTime TimeOfOpenDisplay { get; set; }
        public DateTime TimeOfCloseDisplay { get; set; }
    }
}