@inject HttpClient Http
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pulse.Core.Models
@using System.Net.Http.Json

<EditForm Model="@model" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <FluentStack Orientation="Orientation.Vertical" Width="100%" Gap="8">
        <FluentTextField Label="Name" @bind-Value="model.Name" Required="true" />
        <FluentTextArea Label="Description" @bind-Value="model.Description" />

        <FluentDivider></FluentDivider>
        <h3>Address Information</h3>

        <FluentTextField Label="Address Line 1" @bind-Value="model.AddressLine1" Required="true" />
        <FluentTextField Label="Address Line 2" @bind-Value="model.AddressLine2" />
        <FluentTextField Label="Address Line 3" @bind-Value="model.AddressLine3" />
        <FluentTextField Label="Address Line 4" @bind-Value="model.AddressLine4" />
        <FluentGrid Columns="3" ColumnGap="8">
            <FluentGridItem>
                <FluentTextField Label="City" @bind-Value="model.Locality" Required="true" />
            </FluentGridItem>
            <FluentGridItem>
                <FluentTextField Label="State/Province" @bind-Value="model.Region" Required="true" />
            </FluentGridItem>
            <FluentGridItem>
                <FluentTextField Label="Postal Code" @bind-Value="model.Postcode" Required="true" />
            </FluentGridItem>
        </FluentGrid>
        <FluentTextField Label="Country" @bind-Value="model.Country" Required="true" />

        <FluentDivider></FluentDivider>
        <h3>Contact Information</h3>

        <FluentGrid Columns="2" ColumnGap="8">
            <FluentGridItem>
                <FluentTextField Label="Phone Number" @bind-Value="model.PhoneNumber" />
            </FluentGridItem>
            <FluentGridItem>
                <FluentTextField Label="Email" @bind-Value="model.Email" />
            </FluentGridItem>
        </FluentGrid>
        <FluentTextField Label="Website" @bind-Value="model.Website" />
        <FluentTextField Label="Image URL" @bind-Value="model.ImageLink" />

        <FluentDivider></FluentDivider>
        <h3>Venue Type</h3>

        <FluentSelect TOption="VenueTypeOption" Items="@venueTypeOptions"
                      OptionText="@(o => o.Name)"
                      OptionValue="@(o => o)"
                      @bind-Value="selectedType"
                      Label="Venue Type"
                      Required="true">
        </FluentSelect>
    </FluentStack>
</EditForm>

@code {
    [CascadingParameter] FluentDialog Dialog { get; set; }

    private NewVenueRequest model = new()
        {
            Name = "",
            AddressLine1 = "",
            Locality = "",
            Region = "",
            Postcode = "",
            Country = "",
            VenueTypeId = 1
        };

    private List<VenueTypeOption> venueTypeOptions = new();
    private VenueTypeOption selectedType;

    private class VenueTypeOption
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadVenueTypes();
    }

    private async Task LoadVenueTypes()
    {
        try
        {
            var types = await Http.GetFromJsonAsync<List<VenueTypeItem>>("api/admin/venue-types");
            if (types != null && types.Any())
            {
                venueTypeOptions = types.Select(t => new VenueTypeOption { Id = t.Id, Name = t.Name }).ToList();
                selectedType = venueTypeOptions.First();
                model.VenueTypeId = selectedType.Id;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading venue types: {ex.Message}");
        }
    }

    private async Task SubmitForm()
    {
        if (selectedType != null)
        {
            model.VenueTypeId = selectedType.Id;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/admin/venues", model);
            if (response.IsSuccessStatusCode)
            {
                Dialog?.CloseAsync(DialogResult.Ok());
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error creating venue: {error}");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}