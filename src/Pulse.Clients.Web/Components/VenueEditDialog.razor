@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IDialogService DialogService

<FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
    <FluentMessageBar MessageIntent="MessageIntent.Info" Title="Venue Information" Visible="@IsNew">
        Fill in the venue details below. Fields marked with * are required.
    </FluentMessageBar>

    <EditForm Model="@venueModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
                <FluentGrid Columns="2" ColumnGap="16" RowGap="16" Style="width: 100%;">
                    <!-- Basic Information -->
                    <FluentTextField Label="Venue Name *" @bind-Value="venueModel.Name" Required Placeholder="Enter venue name" />
                    <FluentSelect TOption="string"
                                  Label="Venue Type *"
                                  Items="@venueTypeOptions"
                                  @bind-Value="selectedVenueTypeId"
                                  OptionDisabled="@(item => item == "0")"
                                  Required />

                    <FluentTextArea Label="Description" @bind-Value="venueModel.Description" Placeholder="Enter a description" Rows="3" Style="grid-column: span 2;" />

                    <!-- Address -->
                    <div style="grid-column: span 2;">
                        <FluentDivider>Address Information</FluentDivider>
                    </div>

                    <FluentTextField Label="Address Line 1 *" @bind-Value="venueModel.AddressLine1" Required Placeholder="Street address, P.O. box" />
                    <FluentTextField Label="Address Line 2" @bind-Value="venueModel.AddressLine2" Placeholder="Apartment, suite, unit, building, floor, etc." />

                    <FluentTextField Label="City/Locality *" @bind-Value="venueModel.Locality" Required Placeholder="City" />
                    <FluentTextField Label="State/Region *" @bind-Value="venueModel.Region" Required Placeholder="State, province, region" />

                    <FluentTextField Label="Postal Code *" @bind-Value="venueModel.Postcode" Required Placeholder="ZIP or postal code" />
                    <FluentTextField Label="Country *" @bind-Value="venueModel.Country" Required Placeholder="Country" />

                    <!-- Contact Information -->
                    <div style="grid-column: span 2;">
                        <FluentDivider>Contact Information</FluentDivider>
                    </div>

                    <FluentTextField Label="Phone Number" @bind-Value="venueModel.PhoneNumber" Placeholder="e.g. +1 (555) 123-4567" />
                    <FluentTextField Label="Email" @bind-Value="venueModel.Email" Placeholder="contact@example.com" Type="InputType.Email" />

                    <FluentTextField Label="Website" @bind-Value="venueModel.Website" Placeholder="https://www.example.com" />
                    <FluentTextField Label="Image URL" @bind-Value="venueModel.ImageLink" Placeholder="URL to venue image" />
                </FluentGrid>
            </FluentStack>

            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End" HorizontalGap="8">
                <FluentButton Appearance="Appearance.Neutral" OnClick="@OnCancel">Cancel</FluentButton>
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Loading="@isSaving">
                    @(IsNew ? "Create Venue" : "Save Changes")
                </FluentButton>
            </FluentStack>

            <ValidationSummary />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <FluentMessageBar MessageIntent="MessageIntent.Error" Title="Error">@errorMessage</FluentMessageBar>
            }
        </FluentStack>
    </EditForm>
</FluentStack>

@code {
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public VenueEditDialogParameters Parameters { get; set; } = new();

    private NewVenueRequest venueModel = new();
    private List<string> venueTypeOptions = new();
    private Dictionary<string, string> venueTypeNames = new();
    private string selectedVenueTypeId = "0";
    private bool isSaving;
    private string? errorMessage;

    public bool IsNew => Parameters.IsNew;

    protected override void OnInitialized()
    {
        // Initialize venue type options
        venueTypeOptions = new List<string> { "0" };
        venueTypeNames = new Dictionary<string, string> { { "0", "-- Select Venue Type --" } };

        if (Parameters.VenueTypes != null)
        {
            foreach (var vt in Parameters.VenueTypes)
            {
                venueTypeOptions.Add(vt.Id.ToString());
                venueTypeNames[vt.Id.ToString()] = vt.Name;
            }
        }

        if (!IsNew && Parameters.VenueDetails != null)
        {
            // Populate form with existing venue data
            venueModel = new NewVenueRequest
                {
                    Name = Parameters.VenueDetails.Name,
                    Description = Parameters.VenueDetails.Description,
                    AddressLine1 = Parameters.VenueDetails.AddressLine1,
                    AddressLine2 = Parameters.VenueDetails.AddressLine2,
                    AddressLine3 = Parameters.VenueDetails.AddressLine3,
                    AddressLine4 = Parameters.VenueDetails.AddressLine4,
                    Locality = Parameters.VenueDetails.Locality,
                    Region = Parameters.VenueDetails.Region,
                    Postcode = Parameters.VenueDetails.Postcode,
                    Country = Parameters.VenueDetails.Country,
                    PhoneNumber = Parameters.VenueDetails.PhoneNumber,
                    Email = Parameters.VenueDetails.Email,
                    Website = Parameters.VenueDetails.Website,
                    ImageLink = Parameters.VenueDetails.ImageLink,
                    VenueTypeId = Parameters.VenueDetails.VenueTypeId
                };

            // Set selected venue type
            selectedVenueTypeId = Parameters.VenueDetails.VenueTypeId.ToString();
        }
        else
        {
            // Default country value for new venues
            venueModel = new NewVenueRequest
                {
                    Name = "",
                    AddressLine1 = "",
                    Locality = "",
                    Region = "",
                    Postcode = "",
                    Country = "United States",
                    VenueTypeId = 0
                };
        }
    }

    private void OnCancel()
    {
        Dialog.Cancel();
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(selectedVenueTypeId) || selectedVenueTypeId == "0")
        {
            errorMessage = "Please select a venue type";
            return;
        }

        venueModel.VenueTypeId = int.Parse(selectedVenueTypeId);
        isSaving = true;
        errorMessage = null;

        try
        {
            HttpResponseMessage response;

            if (IsNew)
            {
                // Create new venue
                response = await Http.PostAsJsonAsync("api/admin/venues", venueModel);
            }
            else
            {
                // For update, use UpdateVenueRequest
                var updateModel = new UpdateVenueRequest
                    {
                        Name = venueModel.Name,
                        Description = venueModel.Description,
                        AddressLine1 = venueModel.AddressLine1,
                        AddressLine2 = venueModel.AddressLine2,
                        AddressLine3 = venueModel.AddressLine3,
                        AddressLine4 = venueModel.AddressLine4,
                        Locality = venueModel.Locality,
                        Region = venueModel.Region,
                        Postcode = venueModel.Postcode,
                        Country = venueModel.Country,
                        PhoneNumber = venueModel.PhoneNumber,
                        Email = venueModel.Email,
                        Website = venueModel.Website,
                        ImageLink = venueModel.ImageLink,
                        VenueTypeId = venueModel.VenueTypeId
                    };

                // Update existing venue
                response = await Http.PutAsJsonAsync($"api/admin/venues/{Parameters.VenueDetails?.Id}", updateModel);
            }

            if (response.IsSuccessStatusCode)
            {
                await Dialog.CloseAsync(DialogResult.Ok(true));
            }
            else
            {
                errorMessage = $"Failed to {(IsNew ? "create" : "update")} venue: {response.ReasonPhrase}";
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }
}