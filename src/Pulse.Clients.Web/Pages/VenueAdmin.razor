@page "/venue-admin"
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pulse.Core.Models
@using System.Net.Http.Json

<PageTitle>Venue Management</PageTitle>

<FluentStack Orientation="Orientation.Vertical" Gap="16">
    <FluentCard Width="100%">
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8" VerticalAlignment="VerticalAlignment.Center">
            <h1 class="no-margin">Venue Management</h1>
            <FluentSpacer />
            <FluentButton Appearance="Appearance.Accent" OnClick="@(() => NavigationManager.NavigateTo("/new-venue"))">
                <FluentIcon Slot="start" Value="@(new Icons.Regular.Size20.Add())" />
                New Venue
            </FluentButton>
        </FluentStack>
    </FluentCard>

    <FluentCard Width="100%">
        @if (IsLoading)
        {
            <FluentProgressRing />
            <p>Loading venues...</p>
        }
        else
        {
            <FluentDataGrid Items="@(Venues.AsQueryable())" TGridItem="VenueItem" ResizableColumns="true">
                <PropertyColumn Title="Name" Property="@(v => v.Name)" Sortable="true" />
                <PropertyColumn Title="Address" Property="@(v => v.AddressLine1)" Sortable="true" />
                <PropertyColumn Title="City" Property="@(v => v.Locality)" Sortable="true" />
                <PropertyColumn Title="State" Property="@(v => v.Region)" Sortable="true" />
                <PropertyColumn Title="Type" Property="@(v => v.VenueTypeName)" Sortable="true" />
            </FluentDataGrid>
        }
    </FluentCard>
</FluentStack>

@code {
    private List<VenueItem> Venues = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadVenues();
    }

    private async Task LoadVenues()
    {
        try
        {
            IsLoading = true;
            var venues = await Http.GetFromJsonAsync<List<VenueItem>>("api/admin/venues");
            if (venues != null)
            {
                Venues = venues;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading venues: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }
}